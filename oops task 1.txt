{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1072f141-c057-4b1b-9717-a3e845c67e0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed\n",
    "and average_of_vehicle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15c01a34-105d-4793-9986-ccbb34c05083",
   "metadata": {},
   "outputs": [],
   "source": [
    "class vehicle:\n",
    "    def __init__(self,name of_vehicle,max_speed,average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abbe0ec9-80c0-4f11-8af8-7f453c23d7a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "Create a method named seating_capacity which takes capacity as an argument and returns the name of\n",
    "the vehicle and its seating capacity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bb21f3b-3bf9-44b0-ab96-c4ede4ee0fef",
   "metadata": {},
   "outputs": [],
   "source": [
    "class vehicle:\n",
    "    def __init__(self,name of_vehicle,max_speed,average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "        \n",
    "        \n",
    "    class car(vehicle):\n",
    "        def seating_capacity(self,capacity):\n",
    "            self.capacity = capacity\n",
    "            def name_and_capacity(self):\n",
    "                return self.name_of_vehicle,self.capacity\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c0a0f23-1a74-4898-95ce-a0acfc3c69bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "porsche=car(\"porsche\",160,184.11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "222d7315-df50-4cb2-8a10-b83737a0b0be",
   "metadata": {},
   "outputs": [],
   "source": [
    "porsche.seating_capacity(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b63d4f1-92b6-4c1d-937b-09195119086d",
   "metadata": {},
   "outputs": [],
   "source": [
    "porsxhe.name_and_capacity()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91b88cd5-070b-40bf-8fa8-dcf9b48b6220",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5354d2f5-1d9e-430f-af0f-b81f2579786c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#multiple inheritance that allow a class to inherit from two or more parents classess.\n",
    "\n",
    "class one():\n",
    "    def method1(self):\n",
    "        print(\"this is class one\")\n",
    "        \n",
    "class two():\n",
    "    def method2(self):\n",
    "        print(\"this is class two\")\n",
    "        \n",
    "        \n",
    "class three(one,two):\n",
    "    def method3(self):\n",
    "        print(\"this is class three\")\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "69073d7b-07e1-4a8b-8572-5b2103576741",
   "metadata": {},
   "outputs": [],
   "source": [
    "TH = three()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0ed86d80-00bb-440b-a32a-8c3f3339c4c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is class three\n"
     ]
    }
   ],
   "source": [
    "TH.method3()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc109db5-eeb9-482d-986b-20f1c677c63a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is class one\n"
     ]
    }
   ],
   "source": [
    "TH.method1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "50accfe1-5570-49ba-9280-00e1a72b6594",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is class two\n"
     ]
    }
   ],
   "source": [
    "TH.method2()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bf6d4b7-2ad3-49fe-a6ec-18fd97222721",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this\n",
    "class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32d03ab8-32de-426a-8fe2-7afaab5a9e1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#getter: A method that allows you to access an attribute in a given class.\n",
    "#setter: A method that allows you to set the value of an attribute in a class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1270b26c-8ad5-4236-9a2d-b3678cd40189",
   "metadata": {},
   "outputs": [],
   "source": [
    "class marks():\n",
    "    def __init__(self,marks):\n",
    "        self.__marks = 0\n",
    "        \n",
    "    def get_marks(self):\n",
    "        return self.__marks\n",
    "    \n",
    "    def set_marks(self,marks):\n",
    "        self.__marks = marks \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "402016ee-e266-44d5-b398-5fd3249c1562",
   "metadata": {},
   "outputs": [],
   "source": [
    "english = marks(90)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ca22eafb-d56c-4067-8c9d-ef971d9a9652",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "english.get_marks()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2f408b9d-421c-4d42-bccd-4d56340612a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "english.set_marks(90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2a0268e0-2ce5-4973-8593-cb7a16a52301",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "english.get_marks()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1df55ff4-b658-43ed-bd41-1b9eb17eca6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q5.What is method overriding in python? Write a python code to demonstrate method overriding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "092d453e-42e8-4f7e-a688-d5b0c6bf0992",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Method overriding in python is a concept where a subclass provides its own implementation of a method that is already defines in its superclass.\n",
    "# This allows the subclass to customize the behavior of inherit method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6f172a81-7e65-4f44-bb12-84b1db3ef3f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Flower():\n",
    "    def flower_color(self):\n",
    "        print(\"each flower has different with variables color\")\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c52ef7ae-fdd1-4332-9685-31a3506e96f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rose(Flower):\n",
    "    def flower_color(self):\n",
    "        print(\"roses are beauifull\")\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "56bc10e0-3b94-4c68-b42b-9295e3a7206e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Lotus(Flower):\n",
    "    def flower_color(self):\n",
    "        print(\"lotus  are beauifull\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b2692039-4d1b-4316-9e9e-a9037286eb75",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating instances of each class\n",
    "flo = Flower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "00634bf9-575c-4ab6-8f91-464f5b9b7e2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "rose = Rose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "56fdb553-d265-4838-ab5d-2ec64949988d",
   "metadata": {},
   "outputs": [],
   "source": [
    "lotus = Lotus()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "14f045e8-1ddb-4941-8071-477dd5925c40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "each flower has different with variables color\n"
     ]
    }
   ],
   "source": [
    "#calling the overriding methods\n",
    "flo.flower_color()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1cc2051e-04f4-4ec3-b0bd-c7478d8c0b7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roses are beauifull\n"
     ]
    }
   ],
   "source": [
    "rose.flower_color()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "203e766d-76b7-412c-9852-6070a7012336",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lotus  are beauifull\n"
     ]
    }
   ],
   "source": [
    "lotus.flower_color()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37569eca-902a-49d9-a2e0-5b9edaa070fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
